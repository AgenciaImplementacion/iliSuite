apply plugin: "java"

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

compileJava.options.encoding = 'UTF-8'

def distDir = "$buildDir/dist"

def ili2dbVersion = '4.3.0'

def props = new Properties()
file("src/ai/iliSuite/resources/languages/application.properties").withInputStream { 
	stream -> props.load(stream)
}

def appVersion = props.getProperty("general.version")

repositories {
	flatDir {
		dirs 'libs'
	}
	mavenLocal()
	maven {
		url 'http://jars.interlis.ch'
	}
	maven {
		url 'https://oss.sonatype.org/content/repositories/snapshots/'
	}
	mavenCentral()
}

sourceSets {
	main {
		java {
			srcDirs=[
			'src',
			'src_supported_impls/ili2fgdbImpl/src',
			'src_supported_impls/ili2gpkgImpl/src',
			'src_supported_impls/ili2mssqlImpl/src',
			'src_supported_impls/ili2oraImpl/src',
			'src_supported_impls/ili2pgImpl/src']
		}
		resources {
			srcDirs=[
			'src',
			'src_supported_impls/ili2fgdbImpl/src',
			'src_supported_impls/ili2gpkgImpl/src',
			'src_supported_impls/ili2mssqlImpl/src',
			'src_supported_impls/ili2oraImpl/src',
			'src_supported_impls/ili2pgImpl/src']
		}
	}
}

dependencies {
	// libs
	implementation group: 'ch.interlis', name: 'iox-ili', version: '1.20.13'
	implementation group: 'ch.interlis', name: 'ili2c-tool', version: '5.0.2'
	implementation group: 'ch.interlis', name: 'ili2c-core', version: '5.0.2'
	implementation group: 'ch.ehi', name: 'ehisqlgen', version: '1.13.8'
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.7'
	implementation group: 'net.iharder', name: 'base64', version: '2.3.9'
	compile group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.9.0'
	implementation group: 'ch.interlis', name: 'ilivalidator', version: '1.11.1'
	// ili2db
	implementation group: 'ch.interlis', name: 'ili2db', version: "$ili2dbVersion"
	implementation group: 'ch.interlis', name: 'ili2fgdb', version: "$ili2dbVersion"
	implementation group: 'ch.interlis', name: 'ili2gpkg', version: "$ili2dbVersion"
	implementation group: 'ch.interlis', name: 'ili2mssql', version: "$ili2dbVersion"
	//implementation group: 'ch.interlis', name: 'ili2ora', version: "$ili2dbVersion" // temporary disabled
	implementation name: 'ili2oraLib-4.3.0'
	implementation group: 'ch.interlis', name: 'ili2pg', version: "$ili2dbVersion"
	//drivers dbs
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.1.4.jre6'
	implementation group: 'ch.ehi', name: 'fgdb4j', version: "1.1.1"
	implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.11.2'
	implementation group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '6.4.0.jre7'
}

task mainJar(type: Jar) {
	baseName = 'iliSuite'
	from sourceSets.main.output
	manifest {
	attributes(
		"Main-Class": "ai.iliSuite.application.MainPreLoad",
		"Class-Path": configurations.runtimeClasspath.collect { 'ilisuite_lib/'+it.getName() }.join(' '))
	}
}

task cpDistFiles(dependsOn: mainJar, type: Copy){
	into "$distDir"
	// jar
	from("$buildDir/libs/iliSuite.jar")
	//libs
	from(configurations.compileClasspath){
		into 'ilisuite_lib'
	}
	// others
	from("docs/iliSuite_help_es.pdf")
	from ("$projectDir") {
		include "help/**", "programs/**", '.defaultConfig.properties'
	}
}

task updVersionInScriptInstaller {
	doLast {
		def is = file("src_installer/win/ilisuite.iss")
		def newContent = new StringBuffer()
		is.eachLine {
			def line = it
			if(it.contains('#define MyAppVersion ')) {
				line = "#define MyAppVersion \"$appVersion\""
			}
			newContent << line + '\r\n'
		}
		
		is.write newContent.toString()
	}
}

task installerWin(dependsOn: [cpDistFiles, updVersionInScriptInstaller], type: Exec) {
	commandLine 'ISCC', "$projectDir\\src_installer\\win\\ilisuite.iss"
	doLast {
		if(execResult.getExitValue() != 0) {
			def warningMessage = 'Remember to add the InnoSetup directory to the System\'s Path environment variable!!!'
			println warningMessage
			println warningMessage
			println warningMessage
		}
	}
}

task iliSuiteBindist(dependsOn: cpDistFiles, type: Zip) {
	baseName = 'iliSuite_bin'
	destinationDir = file("$buildDir/bindist")
	from "$distDir"
}

if(System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
	iliSuiteBindist.finalizedBy installerWin
}
