plugins {
	id 'org.sonarqube' version '2.8'
	id 'java'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

compileJava.options.encoding = 'UTF-8'

def distDir = "$buildDir/dist"

def ili2dbVersion = '4.4.3'

def props = new Properties()
file("src/ai/ilisuite/resources/languages/application.properties").withInputStream { 
	stream -> props.load(stream)
}

def appVersion = props.getProperty("general.version")

repositories {
	flatDir {
		dirs 'libs'
	}
	mavenLocal()
	maven {
		url 'https://jars.interlis.ch'
	}
	maven {
		url 'https://oss.sonatype.org/content/repositories/snapshots/'
	}
	mavenCentral()
}

sourceSets {
	main {
		java {
			srcDirs=[
			'src',
			'src_supported_impls/ili2fgdbImpl/src',
			'src_supported_impls/ili2gpkgImpl/src',
			'src_supported_impls/ili2mssqlImpl/src',
			'src_supported_impls/ili2oraImpl/src',
			'src_supported_impls/ili2pgImpl/src']
		}
		resources {
			srcDirs=[
			'src',
			'src_supported_impls/ili2fgdbImpl/src',
			'src_supported_impls/ili2gpkgImpl/src',
			'src_supported_impls/ili2mssqlImpl/src',
			'src_supported_impls/ili2oraImpl/src',
			'src_supported_impls/ili2pgImpl/src']
		}
	}
	test {
		java {
			srcDirs=['test/java']
		}
	}
}

dependencies {
	// libs
	implementation group: 'ch.interlis', name: 'iox-ili', version: '1.21.0+'
	implementation group: 'ch.interlis', name: 'ili2c-tool', version: '5.1.0+'
	implementation group: 'ch.interlis', name: 'ili2c-core', version: '5.1.0+'
	implementation group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.9.0'
	//drivers dbs
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.1.4.jre6'
	implementation group: 'ch.ehi', name: 'fgdb4j', version: "1.1.1"
	implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.11.2'
	implementation group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '6.4.0.jre7'
	
	testImplementation group: 'junit', name: 'junit', version: '4.12'
}

task mainJar(type: Jar) {
	archiveBaseName = 'iliSuite'
	from sourceSets.main.output
	manifest {
	attributes(
		"Main-Class": "ai.ilisuite.application.MainPreLoad",
		"Class-Path": configurations.runtimeClasspath.collect { 'ilisuite_lib/'+it.getName() }.join(' '))
	}
}

task cpDistFiles(dependsOn: mainJar, type: Copy){
	into "$distDir"
	// jar
	from("$buildDir/libs/iliSuite.jar")
	//libs
	from(configurations.compileClasspath){
		into 'ilisuite_lib'
	}
	// others
	from("docs/iliSuite_help_es.pdf")
	from ("$projectDir") {
		include "help/**", "programs/**", '.defaultConfig.properties'
	}
}

task updVersionInScriptInstaller {
	doLast {
		def is = file("src_installer/win/ilisuite.iss")
		def newContent = new StringBuffer()
		is.eachLine {
			def line = it
			if(it.contains('#define MyAppVersion ')) {
				line = "#define MyAppVersion \"$appVersion\""
			}
			newContent << line + '\r\n'
		}
		
		is.write newContent.toString()
	}
}

task installerWin(dependsOn: [cpDistFiles, updVersionInScriptInstaller], type: Exec) {
	commandLine 'ISCC', "$projectDir\\src_installer\\win\\ilisuite.iss"
	doLast {
		if(execResult.getExitValue() != 0) {
			def warningMessage = 'Remember to add the InnoSetup directory to the System\'s Path environment variable!!!'
			println warningMessage
			println warningMessage
			println warningMessage
		}
	}
}

task iliSuiteBindist(dependsOn: cpDistFiles, type: Zip) {
	archiveBaseName = 'iliSuite_bin'
	destinationDirectory = file("$buildDir/bindist")
	from "$distDir"
}

if(System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
	iliSuiteBindist.finalizedBy installerWin
}
