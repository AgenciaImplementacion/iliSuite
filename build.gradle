plugins {
	id 'org.sonarqube' version '2.8'
	id 'java'
	id "de.undercouch.download" version "4.1.1"
	id 'application'
	id 'org.openjfx.javafxplugin' version '0.0.8'
}

version '1.3.4'

sourceCompatibility = '1.11'
targetCompatibility = '1.11'

compileJava.options.encoding = 'UTF-8'

def distDir = "$buildDir/dist"

def ili2dbVersion = '4.4.3'
def ilivalidatorVersion = '1.11.6'
def umlEditorVersion = '3.6.8'

def ili2dbApps = ['pg', 'mssql', 'ora', 'gpkg', 'fgdb']
def ili2dbProps = [
	mssql: [ linkPath: 'https://github.com/SwissTierrasColombia/ili2db/releases/download/ili2mssql-{version}/'
			 , zipFileName: 'ili2mssql-{version}.zip']
]

def ili2dbDefaultProps =
	[ linkPath: 'https://jars.interlis.ch/ch/interlis/ili2{app}/{version}/'
	  , zipFileName: 'ili2{app}-{version}-bindist.zip']

def ilivalidatorLink = 'https://jars.interlis.ch/ch/interlis/ilivalidator/' + ilivalidatorVersion + '/ilivalidator-' + ilivalidatorVersion + '-bindist.zip'
def umlEditorLink = 'https://github.com/SwissTierrasColombia/umleditor/releases/download/v' + umlEditorVersion + '/umleditor-' + umlEditorVersion + '.zip'

repositories {
	flatDir {
		dirs 'libs'
	}
	mavenLocal()
	maven {
		url 'https://jars.interlis.ch'
	}
	maven {
		url 'https://oss.sonatype.org/content/repositories/snapshots/'
	}
	mavenCentral()
}

javafx {
    version = "11.0.2"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web' ]
}

sourceSets {
	main {
		java {
			srcDirs=[
			'src',
			'src_supported_impls/ili2fgdbImpl/src',
			'src_supported_impls/ili2gpkgImpl/src',
			'src_supported_impls/ili2mssqlImpl/src',
			'src_supported_impls/ili2oraImpl/src',
			'src_supported_impls/ili2pgImpl/src']
		}
		resources {
			srcDirs=[
			'src',
			'src_supported_impls/ili2fgdbImpl/src',
			'src_supported_impls/ili2gpkgImpl/src',
			'src_supported_impls/ili2mssqlImpl/src',
			'src_supported_impls/ili2oraImpl/src',
			'src_supported_impls/ili2pgImpl/src']
		}
	}
	test {
		java {
			srcDirs=['test/java']
		}
	}
}

dependencies {
	// libs
    implementation group: 'ch.interlis', name: 'ili2c-tool', version: "5.1.1"
    implementation group: 'ch.interlis', name: 'ili2c-core', version: "5.1.1"
	//drivers dbs
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.1.4.jre6'
	implementation group: 'ch.ehi', name: 'fgdb4j', version: "1.1.1"
	implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.11.2'
	implementation group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '6.4.0.jre7'
	
	implementation fileTree(dir: "libs", includes: ['*.jar'])
	testImplementation group: 'junit', name: 'junit', version: '4.12'
}

ext.getLinkOrZipName = { app, onlyZipName ->
	def props = null
	if(ili2dbProps.get(app) == null){
		props = ili2dbDefaultProps
	} else {
		props = ili2dbProps.get(app)
	}
	def link = (!onlyZipName? props['linkPath']:'') + props['zipFileName'] 
	return  link.replace('{app}', app).replace('{version}', ili2dbVersion);
}

ext.getLinks = {
	def links = []
	
	ili2dbApps.each	{ app -> links.add(getLinkOrZipName(app, false)) }
	return links
}

task generateVersions {
	doLast {
		def versionProps = new Properties()
		versionProps.setProperty('version', "$project.version")
		versionProps.setProperty('umlEditorVersion', "$umlEditorVersion")
		versionProps.setProperty('ilivalidatorVersion', "$ilivalidatorVersion")

		def versionPropsFile = new File("src/ai/ilisuite/application/Version.properties")
		versionPropsFile.getParentFile().mkdirs();
		def writer = versionPropsFile.newWriter()
		versionProps.store(writer, null);
		writer.close()
		def versionIli2dbs = new Properties()
		versionIli2dbs.setProperty('version', "$ili2dbVersion")
		
		ili2dbApps.each { app ->
			def path = "src_supported_impls/ili2$app" + 
					"Impl/src/ai/ilisuite/impl/ili2$app/Version.properties"
			 
			def versionPropsFile2 = new File(path)
			versionPropsFile2.getParentFile().mkdirs();
			def writer2 = versionPropsFile2.newWriter()
			versionIli2dbs.store(writer2, null);
			writer2.close()
		}
	}
}

task copyPrograms {
	doLast{
		download {
			src ([umlEditorLink, ilivalidatorLink]  + getLinks())
			dest "$buildDir/tmp"
			overwrite false
		}
		ili2dbApps.each { app ->
			copy {
				def name = getLinkOrZipName(app, true)
				from zipTree("$buildDir/tmp/$name")
				into "programs/ili2db"
			}
		}
		copy {
			def name = "ilivalidator-${ilivalidatorVersion}-bindist"
			from zipTree("$buildDir/tmp/${name}.zip")
			into "programs/$name"
		}
		copy {
			def name = "/umleditor-${umlEditorVersion}"
			from zipTree("$buildDir/tmp/${name}.zip")
			into "programs/$name"
		}
	}
}

task mainJar(dependsOn: generateVersions, type: Jar) {
	archiveBaseName = 'iliSuite'
	from sourceSets.main.output
	manifest {
	attributes(
		"Main-Class": "ai.ilisuite.application.MainPreLoad",
		"Class-Path": configurations.runtimeClasspath.collect { 'ilisuite_lib/'+it.getName() }.join(' '))
	}
}

task cpDistFiles(dependsOn: [mainJar, copyPrograms], type: Copy){
	into "$distDir"
	// jar
	from("$buildDir/libs/iliSuite-${project.version}.jar")
	//libs
	from(configurations.runtimeClasspath){
		into 'ilisuite_lib'
	}
	// others
	from("docs/iliSuite_help_es.pdf")
	from ("$projectDir") {
		include "help/**", "programs/**", '.defaultConfig.properties'
	}
	from ("libs") {
		into 'programs/ili2db/libs'
	}
}

task updVersionInScriptInstaller {
	doLast {
		def is = file("src_installer/win/ilisuite.iss")
		def newContent = new StringBuffer()
		is.eachLine {
			def line = it
			if(it.contains('#define MyAppVersion ')) {
				line = "#define MyAppVersion \"$project.version\""
			}
			newContent << line + '\r\n'
		}
		
		is.write newContent.toString()
	}
}

task installerWin(dependsOn: [cpDistFiles, updVersionInScriptInstaller], type: Exec) {
	commandLine 'ISCC', "$projectDir\\src_installer\\win\\ilisuite.iss"
	doLast {
		if(execResult.getExitValue() != 0) {
			def warningMessage = 'Remember to add the InnoSetup directory to the System\'s Path environment variable!!!'
			println warningMessage
			println warningMessage
			println warningMessage
		}
	}
}

task iliSuiteBindist(dependsOn: cpDistFiles, type: Zip) {
	archiveBaseName = 'iliSuite_bin'
	destinationDirectory = file("$buildDir/bindist")
	from "$distDir"
}

if(System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
	iliSuiteBindist.finalizedBy installerWin
}

clean.dependsOn('generateVersions')
